{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mGo7STOhKFgfysoPsrY3OCoiiwXaxxuo","timestamp":1744720062955},{"file_id":"1DpfCCFbQkzkO1UQheTmgac3YTyVoPgN-","timestamp":1744096709851}],"authorship_tag":"ABX9TyNw60IrnZZgC/z9u+KrNoWp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Assignment 04"],"metadata":{"id":"ZTOcFAORN-u0"}},{"cell_type":"markdown","source":["# 1. LeetCode 225. Implement Stack using Queues"],"metadata":{"id":"ptkp4nzQDg8U"}},{"cell_type":"code","source":["class MyStack:\n","\n","    def __init__(self):\n","        self.q1 = deque()\n","        self.q2 = deque()\n","\n","    def push(self, x: int) -> None:\n","        self.q2.append(x)\n","        while self.q1:\n","            self.q2.append(self.q1.popleft())\n","        self.q1, self.q2 = self.q2, self.q1\n","\n","    def pop(self) -> int:\n","        return self.q1.popleft()\n","\n","    def top(self) -> int:\n","        return self.q1[0]\n","\n","    def empty(self) -> bool:\n","        return not self.q1"],"metadata":{"id":"XpPnAf9VOemQ","executionInfo":{"status":"ok","timestamp":1744718556013,"user_tz":-540,"elapsed":11,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["# 2. LeetCode 232. Implement Queue using Stacks"],"metadata":{"id":"OpTmwmlWPLsf"}},{"cell_type":"code","source":["class MyQueue:\n","\n","    def __init__(self):\n","        self.in_stack = []\n","        self.out_stack = []\n","\n","    def transfer(self):\n","        while self.in_stack:\n","            self.out_stack.append(self.in_stack.pop())\n","\n","    def push(self, x: int) -> None:\n","        self.in_stack.append(x)\n","\n","    def pop(self) -> int:\n","        if not self.out_stack:\n","            self.transfer()\n","        return self.out_stack.pop()\n","\n","    def peek(self) -> int:\n","        if not self.out_stack:\n","            self.transfer()\n","        return self.out_stack[-1]\n","\n","    def empty(self) -> bool:\n","        return not self.in_stack and not self.out_stack"],"metadata":{"id":"pv-daVknPSmv","executionInfo":{"status":"ok","timestamp":1744718557903,"user_tz":-540,"elapsed":23,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":["# 큐 연습문제"],"metadata":{"id":"RNNXDwcMPcoV"}},{"cell_type":"markdown","source":["01"],"metadata":{"id":"r0bmPkkNPedO"}},{"cell_type":"code","source":["class ListQueue:\n","    def __init__(self):\n","        self._queue = []\n","\n","    def enqueue(self, x):\n","        self._queue.insert(0, x)\n","\n","    def dequeue(self):\n","        return self._queue.pop()\n","    def front(self):\n","        return self._queue[-1]\n","\n","    def isEmpty(self) -> bool:\n","        return len(self._queue) == 0\n","\n","    def dequeueAll(self):\n","        self._queue.clear()"],"metadata":{"id":"CSJ-e23aPgp3","executionInfo":{"status":"ok","timestamp":1744718559809,"user_tz":-540,"elapsed":22,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["02"],"metadata":{"id":"pvxS6VkrPktH"}},{"cell_type":"code","source":["from collections import deque\n","\n","def is_in_language(s: str) -> bool:\n","    q = deque()\n","    found_dollar = False\n","\n","    for ch in s:\n","        if ch == '$':\n","            found_dollar = True\n","            break\n","        q.append(ch)\n","\n","    if not found_dollar:\n","        return False\n","\n","    for ch in s[len(q)+1:]:\n","        if not q or q.pop() != ch:\n","            return False"],"metadata":{"id":"V8zuTG3RPqPI","executionInfo":{"status":"ok","timestamp":1744718561338,"user_tz":-540,"elapsed":42,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["03"],"metadata":{"id":"DoYfrQj1Pltr"}},{"cell_type":"code","source":["class Node:\n","    def __init__(self, data):\n","        self.data = data\n","        self.next = None\n","\n","class LinkedQueue:\n","    def __init__(self):\n","        self.front = None\n","        self.rear = None\n","\n","    def enqueue(self, item):\n","        new_node = Node(item)\n","        if self.rear is None:\n","            self.front = self.rear = new_node\n","        else:\n","            self.rear.next = new_node\n","            self.rear = new_node\n","\n","    def is_empty(self):\n","        return self.front is None"],"metadata":{"id":"63oEB6H9PvZx","executionInfo":{"status":"ok","timestamp":1744718562954,"user_tz":-540,"elapsed":28,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["04"],"metadata":{"id":"loflKUVOPmj3"}},{"cell_type":"code","source":["from collections import deque\n","\n","class StackUsingQueues:\n","    def __init__(self):\n","        self.q1 = deque()\n","        self.q2 = deque()\n","\n","    def push(self, x):\n","        self.q1.append(x)\n","\n","    def pop(self):\n","        while len(self.q1) > 1:\n","            self.q2.append(self.q1.popleft())\n","\n","        popped = self.q1.popleft()\n","\n","        self.q1, self.q2 = self.q2, self.q1\n","\n","        return popped\n","\n","    def top(self):\n","        while len(self.q1) > 1:\n","            self.q2.append(self.q1.popleft())\n","\n","        top_item = self.q1.popleft()\n","        self.q2.append(top_item)\n","\n","        self.q1, self.q2 = self.q2, self.q1\n","\n","        return top_item\n","\n","    def isEmpty(self):\n","        return len(self.q1) == 0"],"metadata":{"id":"5__n2HZAPysb","executionInfo":{"status":"ok","timestamp":1744718564526,"user_tz":-540,"elapsed":17,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":["05"],"metadata":{"id":"maJGK_O5PnQS"}},{"cell_type":"code","source":["class InefficientQueue:\n","    def __init__(self):\n","        self.stack1 = []\n","        self.stack2 = []\n","\n","    def enqueue(self, x):\n","        while self.stack1:\n","            self.stack2.append(self.stack1.pop())\n","        self.stack1.append(x)\n","\n","        while self.stack2:\n","            self.stack1.append(self.stack2.pop())\n","\n","    def dequeue(self):\n","        if not self.stack1:\n","            raise IndexError(\"Queue is empty\")\n","        return self.stack1.pop()"],"metadata":{"id":"z8Z_5tbeP4co","executionInfo":{"status":"ok","timestamp":1744718566516,"user_tz":-540,"elapsed":6,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":["06"],"metadata":{"id":"NUh_w3UEPn9R"}},{"cell_type":"code","source":["class ListQueue:\n","    def __init__(self):\n","        self.queue = []\n","\n","    def enqueue(self, x):\n","        self.queue.append(x)\n","\n","    def dequeue(self):\n","        return self.queue.pop(0)\n","\n","    def front(self):\n","        return self.queue[0]\n","\n","    def isEmpty(self):\n","        return len(self.queue) == 0\n","\n","    def dequeueAll(self):\n","        self.queue.clear()"],"metadata":{"id":"n--AM9ffP8jn","executionInfo":{"status":"ok","timestamp":1744718568372,"user_tz":-540,"elapsed":27,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":["07"],"metadata":{"id":"4hEdCBbSPod0"}},{"cell_type":"code","source":["class Node:\n","    def __init__(self, data):\n","        self.data = data\n","        self.link = None\n","\n","class LinkedListBasic:\n","    def __init__(self):\n","        self.head = None"],"metadata":{"id":"K16Ch_OmRjbp","executionInfo":{"status":"ok","timestamp":1744718570688,"user_tz":-540,"elapsed":20,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":["08"],"metadata":{"id":"dGTbTN89PpCl"}},{"cell_type":"code","source":["class ListDeque:\n","    def __init__(self):\n","        self._queue = deque()\n","\n","    def isEmpty(self) -> bool:\n","        return len(self._queue) == 0\n","\n","    def addFront(self, x):\n","        self._queue.appendleft(x)\n","\n","    def addRear(self, x):\n","        self._queue.append(x)\n","\n","    def deleteFront(self):\n","        if self.isEmpty():\n","            return None\n","        return self._queue.popleft()\n","\n","    def deleteRear(self):\n","        if self.isEmpty():\n","            return None\n","        return self._queue.pop()\n","\n","    def getFront(self):\n","        if self.isEmpty():\n","            return None\n","        return self._queue[0]\n","\n","    def getRear(self):\n","        if self.isEmpty():\n","            return None\n","        return self._queue[-1]\n","\n","    def dequeueAll(self):\n","        self._queue.clear()\n","\n","    def printQueue(self):\n","        print(\"Deque from front:\", end=' ')\n","        for item in self._queue:\n","            print(item, end=' ')\n","        print()\n"],"metadata":{"id":"LNEOoovsRmUd","executionInfo":{"status":"ok","timestamp":1744718572026,"user_tz":-540,"elapsed":18,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":["# Assignment 05"],"metadata":{"id":"BvkY82AfD1Yq"}},{"cell_type":"markdown","source":["생일 데이터를 교재 코드(heap.py)를 이용해 힙으로 저장하고, 생일이 느린 순서로\n","10명의 친구를 출력하기"],"metadata":{"id":"uQXq91g1HDxe"}},{"cell_type":"code","source":["import pandas as pd\n","from heap import Heap\n","\n","df = pd.read_csv(\"birthday.csv\")\n","\n","df.rename(columns=lambda x: x.strip(), inplace=True)\n","\n","df['생년월일'] = pd.to_datetime(\n","    df['생년월일8자리(예.20040101)'].astype(str).str.replace('.0', '', regex=False),\n","    format='%Y%m%d',\n","    errors='coerce'\n",")\n","\n","heap_data = [\n","    (row['생년월일'].timestamp(), row['이름'])\n","    for _, row in df.iterrows()\n","    if pd.notna(row['생년월일'])\n","]\n","\n","h = Heap()\n","for item in heap_data:\n","    h.insert(item)\n","\n","for _ in range(min(10, h.size())):\n","    timestamp, name = h.deleteMax()\n","    birthday = pd.to_datetime(timestamp, unit='s').strftime('%Y-%m-%d')\n","    print(f\"{name} - {birthday}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3CXtkv9SHEIY","executionInfo":{"status":"ok","timestamp":1744718609070,"user_tz":-540,"elapsed":253,"user":{"displayName":"선","userId":"10208583301304387471"}},"outputId":"d461b839-bacc-44a8-e07d-56c4d165c28c"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["신수민 - 2005-12-30\n","이서영 - 2005-12-25\n","강민주 - 2005-12-14\n","김민경 - 2005-12-02\n","이서영 - 2005-11-12\n","배시은 - 2005-11-02\n","김여원 - 2005-10-31\n","이서진 - 2005-10-28\n","서홍빈 - 2005-10-24\n","김예빈 - 2005-10-19\n"]}]},{"cell_type":"markdown","source":["생일 데이터를 교재 코드(circularDoublyLinkedList.py)를 이용해 리스트로\n","저장하고, 같은 조(지난 과제 지정 조원 참조)의 친구들만 이름과 생년월일을\n","출력하는 코드를 작성하기\n"],"metadata":{"id":"fjQftCEkSLzw"}},{"cell_type":"code","source":["import pandas as pd\n","from circularDoublyLinkedList import CircularDoublyLinkedList\n","\n","df = pd.read_csv(\"birthday.csv\")\n","df['생년월일'] = pd.to_datetime(df['생년월일8자리(예.20040101)'], format='%Y%m%d', errors='coerce')\n","\n","team = ['김난영', '류현주', '주희선', '이재인', '김수민', '김미배', '이예성','김연우', '양소윤', '유채원', '이서현', '김남은', '이서진', '박소정']\n","filtered = df[df['이름'].isin(team)]\n","\n","lst = CircularDoublyLinkedList()\n","for _, row in filtered.iterrows():\n","    if pd.notna(row['생년월일']):\n","        item = (row['이름'], row['생년월일'].strftime('%Y-%m-%d'))\n","        lst.append(item)\n","\n","for name, birthday in lst:\n","    print(f\"{name} - {birthday}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xeok-EVrSRTd","executionInfo":{"status":"ok","timestamp":1744718548107,"user_tz":-540,"elapsed":51,"user":{"displayName":"선","userId":"10208583301304387471"}},"outputId":"f70999ee-575e-4628-d31a-c1b11c197487"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["김난영 - 2004-01-17\n","김남은 - 2000-02-09\n","김미배 - 2005-03-24\n","김수민 - 2004-12-07\n","양소윤 - 2003-07-02\n","유채원 - 2005-09-20\n","이서진 - 2005-03-05\n","이서진 - 2005-10-28\n","이서현 - 2004-06-09\n","이재인 - 2004-11-07\n","주희선 - 2005-09-26\n"]}]},{"cell_type":"markdown","source":["-> 이름 안뜬사람 : 생년월일 작성 X"],"metadata":{"id":"hti644v-VfnG"}},{"cell_type":"markdown","source":["# 8장 연습문제"],"metadata":{"id":"dhfKf_k7VtyI"}},{"cell_type":"markdown","source":["**01**"],"metadata":{"id":"7grrH-kgVyHB"}},{"cell_type":"markdown","source":["맞습니다.\n","더 얕은 곳에 있는 원소가 더 깊은 곳에 있는 원소보다 작을 수 있습니다.\n","최대 힙에서는 단지 부모가 자식보다 크기만 보장되며, 같은 깊이 또는 다른 경로의 원소 간 크기 관계는 보장되지 않습다."],"metadata":{"id":"LkE70kq0Vz3I"}},{"cell_type":"markdown","source":["**02**"],"metadata":{"id":"CxU6NJhhV-mN"}},{"cell_type":"markdown","source":["그렇지 않습니다.\n","마지막 원소는 가장 작은 값일 수도 있지만 항상 그런 것은 아닙니다.\n","힙은 전체 순서를 보장하지 않고 부모-자식 간의 관계만 유지하므로 A[n-1]이 최소값이 아닐 수 있습니다."],"metadata":{"id":"eZcZqZ2ZWI_1"}},{"cell_type":"markdown","source":["**03**"],"metadata":{"id":"gtInJs9TWAEm"}},{"cell_type":"markdown","source":["n/2개의 원소는 리프 노드이므로 스며내리기를 하지 않습니다.\n","따라서 n개의 노드 중 절반 이상은 확인 없이 넘어가게 됩니다.\n","\n","\n"],"metadata":{"id":"wheTUy_eWT-E"}},{"cell_type":"markdown","source":["**04**"],"metadata":{"id":"bxt8J8FPWEPQ"}},{"cell_type":"markdown","source":["최악의 경우 시간 복잡도는 Θ(log n)이고, 최선의 경우는 Θ(1)입니다."],"metadata":{"id":"PR1PsMxtYfwx"}},{"cell_type":"markdown","source":["**05**"],"metadata":{"id":"y8YvXiJxWFik"}},{"cell_type":"markdown","source":["맞습니다. 힙의 마지막 원소를 삭제하는 것은 간단하며 리스트에서 그냥 pop()하면 됩니다."],"metadata":{"id":"BBXmoPCJYksN"}},{"cell_type":"markdown","source":["**06**"],"metadata":{"id":"Di-aVGmvWGoc"}},{"cell_type":"markdown","source":["위에서부터 스며오르기를 반복하는 방법은 buildHeap보다 덜 효율적입니다.\n","buildHeap은 Θ(n)의 시간이 걸리지만, 스며오르기 방식은 Θ(n log n)의 시간이 걸리게 됩니다."],"metadata":{"id":"QR-NGe0KYs-I"}},{"cell_type":"markdown","source":["**07**"],"metadata":{"id":"aOyZgB8dWHbn"}},{"cell_type":"markdown","source":["값이 증가하면 해당 노드를 루트 방향으로 스며오르게 하여 O(log n) 안에 힙을 복구할 수 있습니다.\n","또한 부모 노드보다 크면 계속 자리를 바꾸며 위로 올라간다."],"metadata":{"id":"IvGfTQU_Y2oG"}},{"cell_type":"markdown","source":["# LeetCode 703. Kth Largest Element in Stream"],"metadata":{"id":"NTXQ-BDjZKUh"}},{"cell_type":"code","source":["import heapq\n","\n","class KthLargest:\n","\n","    def __init__(self, k: int, nums: list[int]):\n","        self.k = k\n","        self.heap = nums\n","        heapq.heapify(self.heap)\n","\n","        while len(self.heap) > k:\n","            heapq.heappop(self.heap)\n","\n","    def add(self, val: int) -> int:\n","        heapq.heappush(self.heap, val)\n","        if len(self.heap) > self.k:\n","            heapq.heappop(self.heap)\n","        return self.heap[0]"],"metadata":{"id":"ErdUDAK0ZMPl","executionInfo":{"status":"ok","timestamp":1744719898131,"user_tz":-540,"elapsed":15,"user":{"displayName":"선","userId":"10208583301304387471"}}},"execution_count":47,"outputs":[]}]}